http:
 #region routers 
  routers: #incoming requests
    proxmox: #name of the service
      entryPoints:
        - "https"
      rule: "Host(`proxmox.local.example.com`)" #pointing to reverse proxy
      middlewares:
        - default-headers
      tls: {}
      service: proxmox
    pihole:
      entryPoints:
        - "https"
      rule: "Host(`pihole.local.example.com`)"
      middlewares:
        - default-headers
        - addprefix-pihole
      tls: {}
      service: pihole
    homebridge:
      entryPoints:
        - "https"
      rule: "Host(`homebridge.local.example.com`)"
      middlewares:
        - default-headers
      tls: {}
      service: homebridge
    syncthing:
      entryPoints:
        - "https"
      rule: "Host(`syncthing.local.example.com`)"
      middlewares:
        - default-headers
      tls: {}
      service: syncthing
    truenas:
      entryPoints:
        - "https"
      rule: "Host(`truenas.local.example.com`)"
      middlewares:
        - default-headers
      tls: {}
      service: truenas
    plex:
      entryPoints:
        - "https"
      rule: "Host(`plex.local.example.com`)"
      middlewares:
        - default-headers
      tls: {}
      service: plex
    minio:
      entryPoints:
        - "https"
      rule: "Host(`minio.local.example.com`)"
      middlewares:
        - default-headers
      tls: {}
      service: minio
    rancher:
      entryPoints:
        - "https"
      rule: "Host(`rancher.local.example.com`)"
      middlewares:
        - default-headers
      tls: {}
      service: rancher
    idrac:
      entryPoints:
        - "https"
      rule: "Host(`idrac.local.example.com`)"
      middlewares:
        - idrac
      tls: {}
      service: idrac
    idrac-console:
      entryPoints:
        - "idrac" # REQUIRED for iDRAC virtual console: Create a new TCP entry point in traefik on port 5900
      rule: "Host(`idrac.local.example.com`)"
      middlewares:
        - idrac
      tls: {}
      service: idrac-console
    opnsense:
      entryPoints:
        - "https"
      rule: "Host(`opnsense.local.example.com`)"
      middlewares:
        - default-headers
      tls: {}
   

#endregion
#region services
  services:
    proxmox:
      loadBalancer:
        servers:
          - url: "https://192.168.0.100:8006" #Local IP address/port that the service is on
        passHostHeader: true
    pihole:
      loadBalancer:
        servers:
          - url: "http://192.168.0.101:80"
        passHostHeader: true
    homebridge:
      loadBalancer:
        servers:
          - url: "http://192.168.0.102:10999"
        passHostHeader: true
    syncthing:
      loadBalancer:
        servers:
          - url: "https://192.168.0.103:8384"
        passHostHeader: true
    truenas:
      loadBalancer:
        servers:
          - url: "https://192.168.0.104"
        passHostHeader: true
    plex:
      loadBalancer:
        servers:
          - url: "https://192.168.0.105:32400"
        passHostHeader: true
    minio:
      loadBalancer:
        servers:
          - url: "https://192.168.0.106:9000/"
        passHostHeader: true
    rancher:
      loadBalancer:
        servers:
          - url: "https://192.168.0.107"
        passHostHeader: true
    idrac:
      loadBalancer:
        servers:
          - url: "https://192.168.0.108"
        passHostHeader: true
    idrac-console:
      loadBalancer:
        servers:
          - url: "https://192.168.0.108:5900"
        passHostHeader: true
    opnsense:
      loadBalancer:
        servers:
          - url: "https://192.168.0.109"
        passHostHeader: true

  middlewares:
  # Authelia guard
    auth:
      forwardauth:
        # http://AUTHELIA_CONTAINER_NAME:9091/api/verify?rd=https://auth.krpros.org/
        address: http://authelia:9091/api/verify?rd=https://auth.krpros.org/
        trustForwardHeader: true
        authResponseHeaders:
          - Remote-User
          - Remote-Groups
          - Remote-Name
          - Remote-Email

    addprefix-pihole:
      addPrefix:
        prefix: "/admin"
    https-redirect:     # 
      redirectScheme:   # Automatically redirect everything to https
        scheme: https   #

    # Security headers
    default-headers:
      headers:
        customResponseHeaders:
          X-Robots-Tag: "none,noarchive,nosnippet,notranslate,noimageindex"
          server: ""
          X-Forwarded-Proto: "https"
        sslProxyHeaders:
          X-Forwarded-Proto: https
        referrerPolicy: "strict-origin-when-cross-origin"
        hostsProxyHeaders:
          - "X-Forwarded-Host"
        frameDeny: true
        sslRedirect: true
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 63072000 #63072000 or 15552000
        customFrameOptionsValue: SAMEORIGIN
        customRequestHeaders:
          X-Forwarded-Proto: https

    #idrac:
      #headers:
        #frameDeny: true
        #sslRedirect: true
        #browserXssFilter: true
        #forceSTSHeader: true
        #stsIncludeSubdomains: true
        #stsSeconds: 15552000
        #customFrameOptionsValue: SAMEORIGIN
        #customRequestHeaders:
          #X-Forwarded-Proto: https
    
    # Only allow local networks
    #local-ipwhitelist:
      #ipWhiteList:
        #sourceRange:
        #- "10.0.0.0/8"
        #- "192.168.0.0/16"
        #- "172.16.0.0/12"
    # Container requires below label in deployment if only going to be local
    # traefik.http.routers.APPNAME.middlewares: local-ipwhitelist@file

    #secured:
      #chain:
        #middlewares:
        #- default-whitelist
        #- default-headers

# Only use secure ciphers - https://ssl-config.mozilla.org/#server=traefik&version=2.6.0&config=intermediate&guideline=5.6
tls:
  options:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305