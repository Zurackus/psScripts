//***Alerts***
//***Parameters(Global)***
Basic Time Parameter - {TimeRange} - Required
Country Parameter - {CountryParam} - Dropdown, Not Required, Query
let IP_Data = external_data(
    network:string,
    geoname_id:long,
    continent_code:string,
    continent_name:string,
    country_iso_code:string,
    country_name:string,
    is_anonymous_proxy:bool,
    is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv']
    with (ignoreFirstRecord=true, format="csv");
IP_Data
| summarize by country_name
| sort by country_name asc
//Alerts by IP
let IP_Data = external_data(
    network:string,
    geoname_id:long,
    continent_code:string,
    continent_name:string,
    country_iso_code:string,
    country_name:string,
    is_anonymous_proxy:bool,
    is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv']
    with (ignoreFirstRecord=true, format="csv");
SecurityAlert
| where TimeGenerated {TimeRange} //***
| extend AlertEntities = parse_json(Entities)
| mv-expand AlertEntities
| extend IPAddress = tostring(AlertEntities.Address)
| where isnotempty(IPAddress)
| summarize count() by IPAddress
| evaluate ipv4_lookup(IP_Data, IPAddress, network)
| where ('{CountryParam}' == '' and country_name != "United States") or country_name == '{CountryParam}' //***
| project IPAddress, count_//Added 'country_name'
| order by count_ desc
| render columnchart
//-----------------------------------------------------------------------------------------
//EDR Alerts
let IP_Data =
    external_data(
        network:string,
        geoname_id:long,
        continent_code:string,
        continent_name:string,
        country_iso_code:string,
        country_name:string,
        is_anonymous_proxy:bool,
        is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv']
    with (ignoreFirstRecord=true, format="csv");
SecurityAlert
| where TimeGenerated {TimeRange} //***
| where ProviderName == "MDATP"
| extend Entities = parse_json(Entities)
| mv-expand Entities
| extend BadIPAddress = tostring(Entities.Address)
| extend HostName = tostring(Entities.CompromisedEntity)
| summarize count() by BadIPAddress, CompromisedEntity,DisplayName, bin(TimeGenerated, 1h)
| where isnotempty(BadIPAddress)
| evaluate ipv4_lookup(IP_Data, BadIPAddress, network)
| where ('{CountryParam}' == '' and country_name != "United States") or country_name == '{CountryParam}' //***
| summarize count() by country_name, BadIPAddress, CompromisedEntity, DisplayName
| order by count_ desc //Added
| limit 10//Added
//-----------------------------------------------------------------------------------------
//Timeline: Spikes by Alert
let IP_Data =
    external_data(
        network:string,
        geoname_id:long,
        continent_code:string,
        continent_name:string,
        country_iso_code:string,
        country_name:string,
        is_anonymous_proxy:bool,
        is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv']
    with (ignoreFirstRecord=true, format="csv");
SecurityAlert
| where TimeGenerated {TimeRange} //***
| extend AlertEntities = parse_json(Entities)
| mv-expand AlertEntities
| extend IPAddress = tostring(AlertEntities.Address)
| summarize count() by IPAddress, DisplayName, ProviderName, bin(TimeGenerated, 1h)
| where isnotempty(IPAddress)
| evaluate ipv4_lookup(IP_Data, IPAddress, network)
| where ('{CountryParam}' == '' and country_name != "United States") or country_name == '{CountryParam}' //***
| project TimeGenerated, country_name, count_ //country_name or IPAddress
| render columnchart //timechart columnchart
//-----------------------------------------------------------------------------------------
//***Malicious Traffic***
//***Parameters(Global)***
Basic Time Parameter - {TimeRange} - Required
Country Parameter - {CountryParam} - Dropdown, Not Required, Query, {TimeRange}
CommonSecurityLog
| extend Country=MaliciousIPCountry
| where isnotempty(Country) //***
| where Country != "United States" //***
| summarize by Country
| sort by Country asc
//Traffic: Destination Domain and Port(33%)
CommonSecurityLog
| where TimeGenerated {TimeRange} //***
| where DestinationIP == ""
| extend Country=MaliciousIPCountry //Commented out
| where isnotempty(Country) //***
| where ("{CountryParam}" == '' and Country != "United States") or Country == "{CountryParam}" //***
| summarize count() by Country, DestinationHostName, DestinationPort
| order by count_ desc
| limit 10
//-----------------------------------------------------------------------------------------
//Traffic: Destination IP and Port(33%)
CommonSecurityLog
| where TimeGenerated {TimeRange} //***
| where DestinationIP <> ""
| extend Country=MaliciousIPCountry
| where isnotempty(Country) //***
| where ("{CountryParam}" == '' and Country != "United States") or Country == "{CountryParam}" //***
| summarize count() by MaliciousIPCountry, DestinationIP, DestinationPort
| order by count_ desc
| limit 10
//-----------------------------------------------------------------------------------------
//Traffic: Top 10 Malicious IPs(Sources)(33%)
CommonSecurityLog
| where TimeGenerated {TimeRange} //***
| where DestinationIP == ""
| extend  Country=MaliciousIPCountry
| where isnotempty(Country) //***
| where ("{CountryParam}" == '' and Country != "United States") or Country == "{CountryParam}" //***
| summarize count() by Country, MaliciousIP
| order by count_ desc
| limit 10
//-----------------------------------------------------------------------------------------
//Chart for all countries excluding US(25%)
    CommonSecurityLog
    | where TimeGenerated {TimeRange} //***
    | extend Country=MaliciousIPCountry
    | where isnotempty(Country)
    | where ("{CountryParam}" == '' and Country != "United States") or Country == "{CountryParam}" //***
    | summarize count() by Country
    | order by count_ desc
//Timeline: Spikes by events, Includes log sources - cisco, etc(75%)
CommonSecurityLog
| where TimeGenerated {TimeRange} //***
| extend Country=MaliciousIPCountry
| where isnotempty(Country) //***
| where ('{CountryParam}' == '' and Country != "United States") or Country == '{CountryParam}' //***
| summarize count() by Country, bin(TimeGenerated, 1h)
| order by count_ desc
| render timechart
//-----------------------------------------------------------------------------------------
//***All Traffic***
//Traffic: Destination IPs by count
let IP_Data = 
    external_data(
        network:string,
        geoname_id:long,
        continent_code:string,
        continent_name:string,
        country_iso_code:string,
        country_name:string,
        is_anonymous_proxy:bool,
        is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv']
    with (ignoreFirstRecord=true, format="csv");
CommonSecurityLog
| where TimeGenerated > ago(1h)
| where DestinationIP !startswith "192."
| where DestinationIP !startswith "10."
| where DestinationIP !startswith "127."
| where DestinationIP !startswith "171."
| summarize count() by SourceIP, DestinationIP, DestinationPort, SimplifiedDeviceAction, DeviceVendor, bin(TimeGenerated, 1h)
| where isnotempty(SourceIP)
| evaluate ipv4_lookup(IP_Data, SourceIP, network)
| where country_name != "United States"
//|project TimeGenerated, country_name, IPAddress, ProviderName, DisplayName
| where country_name == "Russia"
|summarize count() by SourceIP
|render columnchart 
//-----------------------------------------------------------------------------------------
//Traffic: Source, Destination and Dest port
let IP_Data = 
    external_data(
        network:string,
        geoname_id:long,
        continent_code:string,
        continent_name:string,
        country_iso_code:string,
        country_name:string,
        is_anonymous_proxy:bool,
        is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv']
    with (ignoreFirstRecord=true, format="csv");
CommonSecurityLog
| where TimeGenerated > ago(1h)
| where not (SourceIP startswith "192." or SourceIP startswith "10." or SourceIP startswith "127." or SourceIP startswith "171.")
| where DeviceVendor == "Palo Alto Networks"
| summarize count() by SourceIP, SourcePort, DestinationIP, DestinationPort, ApplicationProtocol, Activity, SimplifiedDeviceAction, DeviceVendor, DeviceCustomString5, Message, RequestURL, DeviceEventClassID,FlexString2,bin(TimeGenerated, 1h)
| where isnotempty(SourceIP)
| evaluate ipv4_lookup(IP_Data, SourceIP, network)
| where country_name != "United States"
| where country_name == "Russia"
|summarize count() by SourceIP, DestinationIP, DestinationPort
|order by count_ desc 
|render scatterchart 
//-----------------------------------------------------------------------------------------
//Traffic: Destination IP, Port and Zone
let IP_Data = 
    external_data(
        network:string,
        geoname_id:long,
        continent_code:string,
        continent_name:string,
        country_iso_code:string,
        country_name:string,
        is_anonymous_proxy:bool,
        is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv']
    with (ignoreFirstRecord=true, format="csv");
CommonSecurityLog
| where TimeGenerated > ago(1h)
| where not (SourceIP startswith "192." or SourceIP startswith "10." or SourceIP startswith "127." or SourceIP startswith "171.")
| where DeviceVendor == "Palo Alto Networks"
| summarize count() by SourceIP, DestinationIP, DestinationPort, ApplicationProtocol, Activity, SimplifiedDeviceAction, DeviceVendor, DeviceCustomString5, Message, RequestURL, DeviceEventClassID,FlexString2,bin(TimeGenerated, 1h)
| where isnotempty(SourceIP)
| evaluate ipv4_lookup(IP_Data, SourceIP, network)
| where country_name != "United States"
| where country_name == "Russia"
|summarize count() by DestinationIP, DestinationPort, DeviceCustomString5
|order by count_ desc 
//-----------------------------------------------------------------------------------------
//PaloAlto Outbound Web
let IP_Data = 
    external_data(
        network:string,
        geoname_id:long,
        continent_code:string,
        continent_name:string,
        country_iso_code:string,
        country_name:string,
        is_anonymous_proxy:bool,
        is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv']
    with (ignoreFirstRecord=true, format="csv");
CommonSecurityLog
| where TimeGenerated > ago(1d)
| where DeviceVendor == "Palo Alto Networks"
| where Activity == "THREAT"
| where SourceIP startswith "192." or SourceIP startswith "10." or SourceIP startswith "127." or SourceIP startswith "171."
| summarize count() by SourceIP, DestinationIP, DestinationPort, ApplicationProtocol, Activity, SimplifiedDeviceAction, DeviceVendor, Message, RequestURL, DeviceEventClassID,FlexString2
| where isnotempty(SourceIP)
| evaluate ipv4_lookup(IP_Data, DestinationIP, network)
//|project TimeGenerated, country_name, IPAddress, ProviderName, DisplayName
| where country_name == "Russia"
|summarize count() by  RequestURL
|order by count_ desc 
|render barchart 
//-----------------------------------------------------------------------------------------
//All PaloAlto Threat by Country
let IP_Data = 
    external_data(
        network:string,
        geoname_id:long,
        continent_code:string,
        continent_name:string,
        country_iso_code:string,
        country_name:string,
        is_anonymous_proxy:bool,
        is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv']
    with (ignoreFirstRecord=true, format="csv");
CommonSecurityLog
| where TimeGenerated > ago(1d)
| where DestinationIP !startswith "192."
| where DestinationIP !startswith "10."
| where DestinationIP !startswith "127."
| where DestinationIP !startswith "171."
| where DeviceVendor == "Palo Alto Networks"
| where Activity == "THREAT"
//| summarize count() by SourceIP, DestinationIP, DestinationPort, ApplicationProtocol, Activity, SimplifiedDeviceAction, DeviceVendor, Message, RequestURL,FlexString2,bin(TimeGenerated, 1h)
//| where isnotempty(SourceIP)
| evaluate ipv4_lookup(IP_Data, DestinationIP, network)
| where country_name != "United States"
//|project TimeGenerated, country_name, IPAddress, ProviderName, DisplayName
|summarize count() by country_name
|order by count_ desc 
|render columnchart 
//-----------------------------------------------------------------------------------------
//Timeline: spikes by events, include bar for each log source - cisco, etc
let IP_Data = 
    external_data(
        network:string,
        geoname_id:long,
        continent_code:string,
        continent_name:string,
        country_iso_code:string,
        country_name:string,
        is_anonymous_proxy:bool,
        is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv']
    with (ignoreFirstRecord=true, format="csv");
CommonSecurityLog
| where TimeGenerated > ago(10d)
| where not (SourceIP startswith "192." or SourceIP startswith "10." or SourceIP startswith "127." or SourceIP startswith "171.")
| evaluate ipv4_lookup(IP_Data, SourceIP, network)
| where country_name == "Russia"
|summarize count() by bin(TimeGenerated, 1h)
|render timechart 
|extend Threshold=2000