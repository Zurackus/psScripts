//Core Functions
where //Filters on a specific predicate
extend //Creates a calculated column and adds it to the result set
summarize //Groups the rows according to the by group columns, and calculates aggregations over each group
render //Renders results as a graphical output
project //Selects the columns to include in the order specified
    project-away //Selects the columns to exclude from the output
    project-keep //Selects the columns to keep in the output
    project-rename //Renames columns in the result output
    project-reorder //Reorders columns in the result output
mv-expand //Turns dynamic arrays into rows (multi-value expansion)


//Core Operators
strcat //Convert to string and concatenate
extend Account = strcat(entity.NTDomain, "\\",entity.Name)
strlen //Returns the length, in characters, of the input string
summarize countif(strlen(name) > 4)
count //Counts records in the input table (for example, T)
summarize count() by process, Process, Computer
    countif //Counts records in the input table meets predicate
    summarize countif(strlen(name) > 4)
    dcount //Returns an estimate for the number of distinct values that are taken by a scalar expression in the summary group
    summarize countries=dcount(country) by continent
startswith //RHS is an initial subsequence of LHS
"Fabrikam" startswith "fab"
!startswith //RHS isn't an initial subsequence of LHS
"Fabrikam" !startswith "kam"


SecurityAlert
| mv-expand entity=todynamic(Entities)//mv-expand turns dynamic arrays into rows that can be called if they are available
| where entity.Type == "account"
| extend Account = strcat(entity.NTDomain, "\\",entity.Name)
| summarize dcount(SystemAlertId) by Account
| join kind=leftouter (
    SecurityEvent
    | summarize make_set(EventID) by Account) on Account
| project-away Account1

let Events = MyLogTable | where type=="Event" ;
Events
| where Name == "Start"
| project Name, City, ActivityId, StartTime=timestamp
| join (Events
    | where Name == "Stop"
        | project StopTime=timestamp, ActivityId)
    on ActivityId
| project City, ActivityId, StartTime, StopTime, Duration = StopTime - StartTime                         